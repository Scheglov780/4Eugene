<? /******************************************************************************************************************* * This file is the part of VPlatform project https://info92.ru * Copyright (C) 2013-2020, info92 team * All rights reserved and protected by law. * You can't use this file without of the author's permission. * ==================================================================================================================== * <description file="UserIdentity.php"> * </description> **********************************************************************************************************************/ ?><?phpclass UserIdentity extends CUserIdentity{    const ERROR_USER_IS_BLOCKED = 200;    function __construct($username, $password = null, $is_hash = false)    {        if (!is_null($password) && !$is_hash) {            $password = md5($password);        }        parent::__construct($username, $password);        if (is_null($password)) {            $this->authenticate();        }    }    private $_id;    public $password;    public $username;    public function authenticate()    {        $record = self::isUserExistsByName($this->username);        if ($record === null) {            $this->errorCode = self::ERROR_USERNAME_INVALID;            $this->errorMessage = Yii::t('main', 'Введенный Email не найден');        } elseif (!is_null($this->password) && $record->password !== $this->password) {            $this->errorCode = self::ERROR_PASSWORD_INVALID;            $this->errorMessage = Yii::t('main', 'Пароль введен неправильно');        } elseif ($record->status != 1) {            $this->errorCode = self::ERROR_USER_IS_BLOCKED;            $this->errorMessage = Yii::t('main', 'Ваш аккаунт заблокирован');        } else {            $this->_id = $record->uid;//            $this->setState('fullname', $record->fullname);//            $this->setState('email', $record->email);            $this->setState('id', $record->uid);            $this->setState('dstoken', sha1(DSConfig::getVal('site_domain') . $record->uid . $record->password));            $this->setState('lastlogin', time());//            if($record->role == '') $record->role = 'user';//            $this->setState('role', $record->role);            $this->errorCode = self::ERROR_NONE;        }        Users::afterAuthenticate($record, !$this->errorCode);        return !$this->errorCode;    }    public function getId()    {        return $this->_id;    }    public static function isUserExistsByName($username)    {        if (isset(Yii::app()->memCache)) {            $useNormalizedEmail = @Yii::app()->memCache->get('useNormalizedEmail');        }        if (!isset($useNormalizedEmail) || !$useNormalizedEmail) {            $useNormalizedEmail = Yii::app()->db->cache(3600)->createCommand(              "SELECT count(0) FROM INFORMATION_SCHEMA.COLUMNS               WHERE                TABLE_NAME='users'                AND COLUMN_NAME = 'normalized_email'                AND is_generated <> 'NEVER'                AND table_catalog = current_catalog 								AND table_schema = current_schema LIMIT 1"            )->queryScalar();            if (isset(Yii::app()->memCache)) {                @Yii::app()->memCache->set('useNormalizedEmail', $useNormalizedEmail, 3600);            }        }        if ($useNormalizedEmail) {            $record = Users::model()->findBySql(              "SELECT * FROM users uu WHERE (email ILIKE trim(lower(:email)) OR uu.phone = :email) AND length(:email)>0 ",              [':email' => strtolower($username)]            );        } else {            $record = Users::model()->findBySql(              "SELECT * FROM users uu WHERE (trim(lower(uu.email)) = trim(lower(:email))  OR uu.phone = :email) AND length(:email)>0",              [':email' => strtolower($username)]            );        }        return $record;    }}